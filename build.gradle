buildscript {
	ext {
		kotlinVersion = '1.2.20'
		springBootVersion = '2.0.0.M7'
	}
	repositories {
		mavenCentral()
        jcenter()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath('cz.habarta.typescript-generator:typescript-generator-gradle-plugin:2.+')
	}
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'cz.habarta.typescript-generator'

group = 'com.github.matek2305'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

configurations {
    ktlint
}

dependencies {
    ktlint('com.github.shyiko:ktlint:0.11.1')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.jetbrains.kotlin:kotlin-stdlib-jre8')
	compile('org.jetbrains.kotlin:kotlin-reflect')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
	testCompile('org.codehaus.groovy:groovy-all:2.4.12')
	testCompile('org.spockframework:spock-core:1.1-groovy-2.4')
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args ['src/**/*.kt']
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args '-F', 'src/**/*.kt'
}

generateTypeScript {
    jsonLibrary = 'jackson2'
    classPatterns = ['com.github.matek2305.izardbets.domain.*']
    outputFile = 'build/sample.d.ts'
    outputKind = 'global'
    namespace = 'RestApi'
}
