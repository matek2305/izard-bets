buildscript {
	ext {
		kotlinVersion = '1.2.21'
		springBootVersion = '2.0.0.RC1'
        gradleDockerVersion = '0.13.0'
	}
	repositories {
		mavenCentral()
		maven { url 'https://repo.spring.io/snapshot' }
		maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://plugins.gradle.org/m2/' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
		classpath("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
        classpath('org.junit.platform:junit-platform-gradle-plugin:1.0.0')
        classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:$gradleDockerVersion")
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'
apply plugin: 'org.junit.platform.gradle.plugin'


group = 'com.github.matek2305'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://repo.spring.io/milestone' }
    maven { url 'http://dl.bintray.com/jetbrains/spek' }
}

configurations {
    ktlint
}

dependencies {
    ktlint('com.github.shyiko:ktlint:0.11.1')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile('org.springframework.boot:spring-boot-starter-webflux')
	compile('org.jetbrains.kotlin:kotlin-stdlib-jre8')
	compile('org.jetbrains.kotlin:kotlin-reflect')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
    compile('org.apache.commons:commons-lang3:3.7')
    testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
    testCompile("org.mockito:mockito-inline:2.13.0")
    testCompile('org.jetbrains.spek:spek-api:1.1.5')
    testRuntime('org.jetbrains.spek:spek-junit-platform-engine:1.1.5')
    testRuntime('org.glassfish:javax.el:3.0.1-b09')
    testRuntime('com.natpryce:hamkrest:1.4.2.2')
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args ['src/**/*.kt']
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args '-F', 'src/**/*.kt'
}

docker {
    name "matek2305/${jar.baseName}"
    dockerfile file('Dockerfile')
    files jar.archivePath
    buildArgs(['JAR_FILE': "${jar.archiveName}"])
    noCache true
}

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}
